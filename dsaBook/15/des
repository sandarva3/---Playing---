- If we want our elements in the list in ordered set, either alphabetically or numerically(ascending or descending), then our go-to data structure would be an array, where we can
	certainly put elements, and run some sorting algorithm in it. But also, when it comes to insertion or deletion, ordedered are quite slow, they take O(N) for extreme and O(N/2) for 
	average cases. 
	We can certainly look for hash table, which are blazingly fast and take O(1) for insertion, searching, and deletion, and reading as well, since hash function is applied to the 
	key to look exactly at the location.

- Tree also works in nodes, and is a kind of datastructure where each node points to two different nodes, the two branches of it. In tree each node may or may not have subtrees,
	eg: if B,C are the branches of A(which have two branches) then B,C may not have branches, or have unequal amount(meaning B might have 2/3/n branches, and C might have it in
	different amount or not have it). The tree is called balanced tree if all nodes in tree have equal number of branches/sub-branches. The main node(A) is called the root node, and all
	are its descendants/child and A is ancestor of all nodes.

- Binary tree are tree structure where each node can have 2 child at max. Node with no child is called leaf node.
- Binary search tree are the binary tree where each node have 2 childs, and the all the left descendants are less than in value than that node, and all the right descendants are greater
	in value than that node.

- Each rows in binary tree is known as level.

- For a Binary tree containing N nodes, the required levels(or rows) is log(N). Let's assume our tree has 2 levels(3 nodes), now to add another node, we need to add all other empty
	nodes as well, to keep it as binary tree. So it takes log(N) levels for N nodes.

-SEARCHING: Similarly, searching for any value in 'binary search tree' requires O(log(N)) steps, the amount of steps of its levels. As with each search step we eliminate half of the 
	remaining nodes, because all left node will have less value and all right will have high value.

- INSERTION: While inserting also, we just traverse the nodes and keep checking where can we create a node(to store the value) properly. This takes O(log(N)) steps too.

- It's IMPORTANT to know that when creating Binary search tree, it's only efficient to create it if the data we're inserting is in random order and not sorted. If it's well sorted in
	ascending or descending order then all the upcoming value would be less or greater than the first value, so we end up creating linear tree, where every node will have branch
	on only same single side(due to which it'll take up to O(N) steps while performing operations). If we want to create a binary tree out of ordered array then we better first de-order
	it and create a tree from that unsorted values.
	

- DELETION: To delete any value/node from tree, we need to perform these steps:
	1) If the deleting node don't have any child, then simple delete it.
	2) If deleting node has one child, then delete that node and keep its child in its position.
	3) If deleting node has two childrens then, then find the successor node from its descendants, delete the deleting node and replace it with successor node.
		Successor node: The node which have just the high value than deleting node, but it's also the least of all values among descendants of deleting node.
		Finding successor node: Just go to right-child of deleting node, and keep going to left child of subsequent nodes until we found a node which has no child, or
		has no left child.
	4) If we found a successor node which only have right child and no-left child then, replace the deleting node with successor node and put the right child as the left child
		of successor's parent.


